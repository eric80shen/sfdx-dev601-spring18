<!--

Use force:recordView and force:recordEdit to enable a user to view and edit detailed information

Tasks:
1. Display a force:chatter feed
2. Implement a Chatter Feed View
3. Create the TripReport Browser
4. Display Trip Report Data with lightning:recordViewForm

-->

<!-- NEW Apex Class -->
public with sharing class TripReportBrowser {
    
    @AuraEnabled
    public static List<TripReport__c> getAll() {
        return [SELECT Id,
                Name, 
                Date__c, 
                Rating__c, 
                Review__c, 
                ReviewType__c,
                Instructor__r.Name
                FROM TripReport__c
                ORDER BY Date__c DESC];
    }
}

<!-- NEW TripReportBrowser.cmp -->
<aura:component controller="TripReportBrowser" extends="c:Base" >
    <aura:attribute name="tripReports" type="TripReport__c[]" access="private" />
    <aura:attribute name="selectedRecordId" type="String" default="" /> 
    
    <aura:registerEvent name="ontripreportmodechange" type="c:TripReportModeChange"/>

    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <aura:handler name="rowclick" event="c:DataGridRowClick" action="{!c.onDataGridClick}"/>
    <aura:handler name="rowdblclick" event="c:DataGridRowDblClick" action="{!c.onBtnEditClick}"/>

    <lightning:layout horizontalAlign="space" multipleRows="true">
        <lightning:layoutItem size="8">
            <lightning:card title="Trip Reports">
                <aura:set attribute="actions">
                    <lightning:button label="New" variant="brand" onclick="{!c.onBtnNewClick}" />
                </aura:set>
                <ui:scrollerWrapper class="scrollerSize">
                    <c:DataGrid aura:Id="datagrid" data="{!v.tripReports}" pkField="Id">
                        <c:DataGridColumn fieldName="Date__c" label="Date" hidden="true" />
                        <c:DataGridColumn fieldName="Name" label="Name" />
                        <c:DataGridColumn fieldName="ReviewType__c" label="Type" />
                        <c:DataGridColumn fieldName="InstructorName" label="Instructor" />
                        <c:DataGridColumn fieldName="Rating__c" label="Rating" />
                    </c:DataGrid>
                </ui:scrollerWrapper>
            </lightning:card>
        </lightning:layoutItem>
        <lightning:layoutItem size="4" padding="horizontal-medium">
            <aura:if isTrue="{!v.selectedRecordId != ''}">

                <!-- insert lightning:recordViewForm here -->
                <lightning:card title="Report Detail">
                    <aura:set attribute="actions">
                        <lightning:button label="Edit" variant="brand" onclick="{!c.onBtnEditClick}"/>
                    </aura:set>
                    <div style="padding:10px">
                        <lightning:recordViewForm recordId="{!v.selectedRecordId}" 
                                                  objectApiName="TripReport__c">
                            
                            <lightning:outputField fieldName="Name" />
                            <lightning:outputField fieldName="Date__c" />
                            <lightning:outputField fieldName="ReviewType__c" />
                            <lightning:outputField fieldName="Instructor__c" />
                            <lightning:outputField fieldName="Rating__c" />
                            <lightning:outputField fieldName="Review__c" />
                            
                        </lightning:recordViewForm>
                    </div>
                </lightning:card>
 
            </aura:if>
        </lightning:layoutItem>
    </lightning:layout>
</aura:component>

<!-- TripReportBrowserController.js -->
({
    doInit : function(component, event, helper) {
        helper.onInit(component);
    },
    
    onDataGridClick: function(component,event,helper) {
        component.set('v.selectedRecordId',event.getParam('pk'));
    },
    
    onBtnNewClick: function(component,event,helper) {
        var compEvent = component.getEvent("ontripreportmodechange");
        compEvent.setParams({"mode" : "add" });
        compEvent.fire();
    },
    
    onBtnEditClick: function(component,event,helper) {
        var compEvent = component.getEvent("ontripreportmodechange");
        compEvent.setParams({
            "mode" : "edit", 
            Id: component.get('v.selectedRecordId') 
        });
        compEvent.fire();
    }
})

<!-- TripReportBrowserHelper.js -->
({
    onInit : function(component) {
        this.callServer(
            component,
            "c.getAll",
            function(response) {  
                for (var i=0; i<response.length; i++) {
                    response[i].InstructorName = response[i].Instructor__r.Name;
                }
                component.set('v.tripReports',response);
            }
        );  
    }
})

<!-- TripReportBrowser.css -->
.THIS.scrollerSize {
    height: 300px;
}

<!-- TripReports.cmp -->
<aura:component >
    
    <aura:attribute name="mode" type="string" default="browse" />
    <aura:attribute name="selectedTripReportId" type="string" default="" />

    <aura:if isTrue="{!v.mode == 'add' || v.mode == 'edit'}">
        <lightning:layout horizontalAlign="space" multipleRows="true">
            <lightning:layoutItem flexibility="auto" padding="around-small" 
                largeDeviceSize="8" mediumDeviceSize="7" smallDeviceSize="12" size="6">              
                <c:TripReportForm aura:Id="myForm" 
                                  Id="{!v.selectedTripReportId}" 
                                  ontripreportmodechange="{!c.onTripReportModeChange}" />
            </lightning:layoutItem>
            <lightning:layoutItem flexibility="auto" padding="around-small" 
                largeDeviceSize="4" mediumDeviceSize="5" smallDeviceSize="12" size="6">
                <!-- exercise 7-3 -->
                <ui:scrollerWrapper class="scroller" >
                    <forceChatter:feed type="groups"/>   
                </ui:scrollerWrapper>
            </lightning:layoutItem>
        </lightning:layout>
        <aura:set attribute="else">
            <c:TripReportBrowser ontripreportmodechange="{!c.onTripReportModeChange}" />
        </aura:set>      
    </aura:if>
    
</aura:component>

<!-- TripReportsController.js -->
({
	onTripReportModeChange : function(component, event, helper) {
		component.set('v.mode', event.getParam('mode'));
        component.set('v.selectedTripReportId', event.getParam('Id'));
	}
})

<!-- TripReports.css -->
.THIS .scroller {
    height: 530px;
    border-radius: 5px;
}

<!-- TripReportForm.cmp -->
<aura:component extends="c:Base" controller="TripReportForm">
    <aura:attribute name="Id" type="String" access="public" default="" description="Id for Trip Report" />
    <aura:attribute name="objReport" type="Object" access="private" description="Target for force:recordData" />
    <aura:attribute name="objReportFields" type="Object" access="private" description="Target fields for force:recordData" />
    <aura:attribute name="objReportError" type="String" access="private" description="Error message for force:recordData exception handling" />
    <aura:attribute name="instructors" type="User[]" access="private" />
    <aura:attribute name="reviewOptions" type="Object[]" access="private"/>
    <aura:attribute name="validateFields" type="String[]" access="private"
                    default="instructorId,locationName,dateVisited,reviewType" />

    <aura:registerEvent name="ontripreportmodechange"  type="c:TripReportModeChange"/>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <aura:handler name="change" value="{!v.Id}" action="{!c.onChangeId}" />   

    <aura:if isTrue="{!empty(v.Id)}">
        <force:recordData aura:id="recordOps" 
                          targetRecord="{!v.objReport}"
                          targetFields="{!v.objReportFields}"
                          targetError="{!v.objReportError}"
                          mode="EDIT"      
                          fields="Name,Instructor__c,Date__c,Rating__c,Review__c,ReviewType__c" />
        <aura:set attribute="else">
            <force:recordData aura:id="recordOps" 
                              recordId="{!v.Id}"
                              targetRecord="{!v.objReport}"
                              targetFields="{!v.objReportFields}"
                              targetError="{!v.objReportError}"
                              mode="EDIT"
                              fields="Name,Instructor__c,Date__c,Rating__c,Review__c,ReviewType__c"
                              recordUpdated="{!c.onBlur}" />
        </aura:set>
    </aura:if>

    <aura:if isTrue="{!not(empty(v.objReportError))}">
        <div>
            <ui:message title="Error" severity="error" closable="true">
                {!v.objReportError}
            </ui:message>
        </div>
    </aura:if>    

    <lightning:card title="{!empty(v.Id) ? 'Add Trip Report' : 'Edit Trip Report'}">
        <form class="slds-formâ€”stacked" style="margin: 10px">
            
            <lightning:select label="Select Instructor" 
                              name="instructor" 
                              value="{!v.objReportFields.Instructor__c}" 
                              required="true"
                              aura:id="instructorId"
                              onblur="{!c.onBlur}">
                <option value="">Select Instructor</option>
                <aura:iteration items="{!v.instructors}" var="instructor">
                    <option value="{!instructor.Id}">
                        {!instructor.Name}
                    </option>
                </aura:iteration>
            </lightning:select>
            
            <lightning:input type="text" 
                             name="Name" 
                             label="Location Name" 
                             value="{!v.objReportFields.Name}" 
                             required="true" 
                             aura:id="locationName"
                             onblur="{!c.onBlur}" />
            <lightning:input name="date" 
                             type="date" 
                             label="Date Visited" 
                             value="{!v.objReportFields.Date__c}" 
                             required="true"
                             aura:id="dateVisited"
                             onblur="{!c.onBlur}" />
            <lightning:radioGroup type="button"
                                  label="Review of:"
                                  options="{!v.reviewOptions}"
                                  name="reviewType"
                                  value="{!v.objReportFields.ReviewType__c}" 
                                  required="true"
                                  aura:id="reviewType"
                                  onblur="{!c.onBlur}" />
            <lightning:slider label="Quality Rating"
                              step="1"
                              min="1"
                              max="5"
                              title="Higher score indicates higher quality"
                              value="{!v.objReportFields.Rating__c}" />
            Review:
            <br />
            <lightning:inputRichText disabledCategories="FORMAT_FONT" value="{!v.objReportFields.Review__c}"/>

            <div class="slds-text-align_center" style="margin-top:5px">
                <lightning:button variant="Brand" label="Save" aura:id="btnSubmit" 
                                  onclick="{!c.onSave}" disabled="true"/>
                <lightning:button label="Cancel" onclick="{!c.onCancel}"/>
            </div>

        </form>
    </lightning:card>
    
</aura:component>

<!-- TripReportFormController.js -->
({
    doInit : function(component, event, helper) {
        helper.onInit(component,event,helper);
    },
    
    onChangeId: function(component,event,helper) {
        helper.onChangeId(component);  
    },
    
    onSave: function(component,event,helper) {
        
        var service = component.find("recordOps");
        
        var obj = component.get('v.objReportFields');
        
        // lightning:radioGroup sometimes encodes the value in an array
        // so we need to convert the array value to a simple value 
        // before saving
        if (Array.isArray(obj.ReviewType__c) && obj.ReviewType__c.length == 1 ) {
            obj.ReviewType__c = obj.ReviewType__c[0];
            component.set('v.objReportFields',obj);
        }

        service.saveRecord(function(saveResult) {
            
            if (saveResult.state === "SUCCESS" || 
                saveResult.state === "DRAFT") {
                
                // record is saved successfully
                
                helper.showToast(component,"Transaction Complete","Your Trip Report was Saved.",null,"success");
                
                
                var compEvent = component.getEvent("ontripreportmodechange");
                compEvent.setParams({"mode" : "view", "id" : component.get('v.Id') });
                compEvent.fire();   
                
            } else if (saveResult.state === "INCOMPLETE") {
                // handle the incomplete state
                component.set('v.objReportError','User is offline, device doesn\'t support drafts.');                    
            } else if (saveResult.state === "ERROR") {
                component.set('v.objReportError','Problem saving record, error: ' + JSON.stringify(saveResult.error));             
            } else {
                alert('Unknown problem, state: ' + saveResult.state);
            }
        });
    },
    
    onBlur : function(component,event,helper) {
        if (helper.validateFields(component)) {
            component.find('btnSubmit').set('v.disabled',false);
        } else {
            component.find('btnSubmit').set('v.disabled',true);
        } 
    },
    
    onCancel: function(component,event,helper) {
        var compEvent = component.getEvent("ontripreportmodechange");
        compEvent.setParams({"mode" : "view"});
        compEvent.fire();   
    }
})