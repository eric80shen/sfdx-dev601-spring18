<!-- BoatSearchResults.cmp -->
<aura:component controller="BoatSearchResults">
    
    <aura:attribute name="boats" type="Boat__c[]" />
    <aura:attribute name="boatTypeId" type="Id" default="" />
    <aura:attribute name="selectedBoatId" type="Id" />
    
    <aura:method name="search" action="{!c.doSearch}">
        <aura:attribute name="param1" type="String" />
    </aura:method>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <aura:handler name="boatselect" event="c:BoatSelect" action="{!c.onBoatSelect}" />
    
    <aura:if isTrue="{! !empty(v.boats) }">
        <lightning:layout horizontalAlign="center" multipleRows="true">
            <aura:iteration items="{!v.boats}" var="boat">
                <lightning:layoutItem padding="around-small" 
                                      size="12" 
                                      smallDeviceSize="6"
                                      mediumDeviceSize="4"
                                      largeDeviceSize="3">    
                    <c:BoatTile boat="{!boat}" selected="{!v.selectedBoatId == boat.Id ? true : false}"/>
                </lightning:layoutItem>
            </aura:iteration>        
        </lightning:layout>   
        <aura:set attribute="else">
            <div class="slds-align_absolute-center">
                No boats found 
            </div>
        </aura:set>
    </aura:if>
    
</aura:component>

<!-- BoatSearchResultsController.js -->
({
	doInit : function(component, event, helper) {
        helper.onSearch(component);
	},
    
    doSearch : function(component, event, helper) {
        var params = event.getParam("arguments");
        if (params) {
            component.set('v.boatTypeId', params.param1);
            helper.onSearch(component);
        }
    },
    
    onBoatSelect : function(component, event, helper) {
        component.set('v.selectedBoatId', event.getParam('boatId'));
    }
})

<!-- BoatSearchResultsHelper.js -->
({
	onSearch : function(component) {
		var action = component.get("c.getBoats");
        
        action.setParams({
            boatTypeId : component.get('v.boatTypeId')
        });
        
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (component.isValid() && state === "SUCCESS") {
                component.set('v.boats', response.getReturnValue());
            }
            else if (component.isValid() && state === "ERROR") {    
                var errors = response.getError();
                if (errors) {
                    console.log("Errors ", errors);
                    if (errors[0] && errors[0].message) {
                        throw new Error("Error: " + errors[0].message);
                    }
                } else {
                    throw new Error("Unknown error");
                }
            }
        });     
        
        $A.enqueueAction(action);
	}
})