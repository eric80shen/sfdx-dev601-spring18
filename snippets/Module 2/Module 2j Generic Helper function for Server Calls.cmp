({
    // Following helper function can be used as a general purpose template for
    // calling Apex methods from a Lightning controller
    // Inputs:
    //    component - Pointer to the Lightning Component
    //    method    - Name of the Apex method to be invoked (c.methodname format)
    //    callback  - Callback function (all Apex requests are done asynchronously)
    //    params    - Optional list of parameters that the Apex method needs
    //    cacheable - Optional boolean that indicates if action is storeable 
    callServer : function(component,method,callback,params,cacheable) {
        // Look at the bound Apex controller class and get a pointer to the Apex method
        // that you want to execute
        var action = component.get(method);

        // If any parameters specified then set them. 
        // params is a JavaScript object of name:value pairs
        if (params) {
            action.setParams(params);
        }

        // If specified set the action to be Storable. A Storable action will have its
        // response stored in the client-side cache by the framework. Caching can be 
        // useful if you want your app to be functional for devices that temporarily 
        // donâ€™t have a network connection.
        if (cacheable) {
            action.setStorable();
        }

        // Set Asynch callback function. Parameter is the response returned from Apex
        // Note you can set different callbacks based on returned state if required
        action.setCallback(this,function(response) {
            var state = response.getState();
            if (state === "SUCCESS") { 
                // Pass returned value to callback function
                callback.call(this,response.getReturnValue());   
            } else if (state === "ERROR") {
                // Generic error handler
                var errors = response.getError();
                if (errors) {
                    console.log("Errors ", errors);
                    if (errors[0] && errors[0].message) {
                        throw new Error("Error " + errors[0].message);
                    }
                } else {
                    throw new Error("Unknown Error");
                }
            }
        });
                
        // Queue the request. Will get queued with any other 
        // requests to minimise round trips to the server
        $A.enqueueAction(action);
    }
})


// Then, to call the above do something like this
({
    echo : function(component, event, helper) {
        // set params to send to service (params is a JSON object)
        var params = {
            firstName : component.find("firstName").get("v.value")
        };

        // call the service, passing in the success function 
        helper.callServer(
            component,
            "c.serverEcho",
            function(response) {
                alert(response);
            }, 
            params
        );
    }
})
