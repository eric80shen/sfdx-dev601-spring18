<!--

Define a dynamic, responsive grid that supports single row selection.

Tasks:
1. Create the DataGridColumn Component
2. Create the DataGridTable Component
3. Mark the Clicked Row as Selected
4. Create the DataGrid Component
5. Handle DataGridColumn Attributes
6. Hide "Hidden" columns

-->

<!-- NEW DataGridColumn.cmp

Description: Subtag for DataGrid component

-->
<aura:component >
    <aura:attribute name="type" type="String" required="false" default="text" access="GLOBAL"
                    description="Valid options: email,phone,text"/>
    <aura:attribute name="label" type="String" required="true" access="GLOBAL" />
    <aura:attribute name="fieldName" type="String" required="true" access="GLOBAL" />
    <aura:attribute name="class" type="String" required="false" access="GLOBAL" default="" />
    <aura:attribute name="hidden" type="Boolean" required="false" default="false" access="GLOBAL"
                    description="Hide Column in Phone view"/>	
</aura:component>

<!-- NEW DataGridTable.cmp

Description: Outputs structured data into an SLDS grid

-->
<aura:component >
    <aura:attribute name="cols" type="Object[]" access="GLOBAL" description="The grid columns."/> 
    <aura:attribute name="rows" type="Object[]" access="GLOBAL" description="The grid row data."/>
    <aura:attribute name="selectedRow" type="Object" access="GLOBAL" />
    
    <table class="slds-table slds-table--bordered slds-max-medium-table--stacked">
        <thead>
            <tr class="slds-text-heading--label">
                <aura:iteration items="{!v.cols}" var="col" indexVar="idx">
                    <th scope="col" class="{!col.class}"><span class="slds-truncate">{!col.label}</span></th>  
                </aura:iteration>
            </tr>
        </thead>
        <tbody >
            <aura:iteration items="{!v.rows}" var="row" indexVar="idx">
                <tr aura:Id="datarow" class="slds-hint-parent" data-row="{!idx}" data-pk="{!row.pk}" onclick="{!c.onRowClick}" ondblclick="{!c.onRowDblClick}">
                    <aura:iteration items="{!row.data}" var="colData">
                        <td class="{!colData.class}"  data-label="{!colData.label}">
                            <span class="slds-truncate">
                                <aura:if isTrue="{!colData.type == 'phone'}">
                                    <lightning:formattedPhone value="{!colData.value}" />
                                    <aura:set attribute="else">
                                        <aura:if isTrue="{!colData.type == 'email'}">
                                            <lightning:formattedEmail value="{!colData.value}" />
                                            <aura:set attribute="else">
                                                {!colData.value}
                                            </aura:set>
                                        </aura:if>
                                    </aura:set>
                                </aura:if>
                            </span>
                        </td>
                    </aura:iteration>
                </tr>
            </aura:iteration>
        </tbody>
    </table>
    
</aura:component>

<!-- DataGridTableController.js -->
({
	onRowClick : function(component, event, helper) {
		var target = event.currentTarget;
        helper.setSelectedRow(component,target);
	}
})

<!-- DataGridTableHelper.js -->
({
    setSelectedRow : function(component, target) {
        var oldRow = component.get('v.selectedRow');
        if (oldRow) {
            $A.util.removeClass(oldRow,'slds-is-selected');
        }
        
        $A.util.addClass(target, 'slds-is-selected');
        component.set('v.selectedRow',target);
    }
})

<!-- DataGridTable.css -->
@media (max-width: 767px) {
    .THIS .hiddenColumn {
        display: none !important;
    }
}

<!-- NEW DataGrid.cmp

Description: Outputs data into an SLDS data table

-->
<aura:component >
    
    <aura:attribute name="cols" type="Object[]" access="PRIVATE" description="The grid columns."/>  
    <aura:attribute name="rows" type="Object[]" access="PRIVATE" description="The rows"/>  
    <aura:attribute name="data" type="Object[]" access="public" description="The grid row data."/>  
    <aura:attribute name="pkField" type="String" access="public" required="true"
                    description="Primary key field in each data row"/>  
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    <aura:handler name="change" value="{!v.data}" action="{!c.doInit}"/>
    
    <c:DataGridTable rows="{!v.rows}" cols="{!v.cols}" />
    
</aura:component>

<!-- DataGridController.js -->
({
    doInit : function(component, event, helper) {
        helper.onInit(component);
    }
})

<!-- DataGridHelper.js -->
({
    onInit : function(component) {
        var obj = this.parseBody(component);
        component.set("v.cols", obj.cols);
        component.set("v.rows", obj.rows);
    },
    
    parseBody: function(component,colItems) {
        // insert code here
        var body = component.get("v.body");
        colItems = colItems || [];
        var thisTag, result;
        
        for (var i = 0; i < body.length; i++) {
            thisTag = body[i];
            if (thisTag.isInstanceOf('c:DataGridColumn')) {
                colItems.push({
                    label : thisTag.get('v.label'),
                    fieldName : thisTag.get('v.fieldName'),
                    type :  thisTag.get('v.type'),
                    class : thisTag.get('v.class') + " " + (thisTag.get('v.hidden') ? "hiddenColumn" : "")
                });
            }            
        }

        // reformat data
        var rowData = component.get('v.data');
        var rowItems = [];
        var pkField = component.get('v.pkField');
        
        for (var i = 0; i < rowData.length; i++) {
            var rowDataItems = [];
            for (var j=0; j<colItems.length; j++) {
                rowDataItems.push({
                    value: rowData[i][colItems[j].fieldName],
                    label: colItems[j].label,
                    type: colItems[j].type,
                    class: colItems[j].class
                });
            }
            rowItems.push({
                data: rowDataItems,
                pk: rowData[i][pkField]
            });  
        }
        
        return {
            cols: colItems,
            rows: rowItems
        }
    }
})

<!-- StudentBrowser.cmp -->
<aura:component implements="flexipage:availableForAllPageTypes" access="global" 
                extends="c:Base"
                controller="StudentBrowser">
    
    <aura:attribute name="studentList" type="Contact[]" access="private" />
    <aura:attribute name="selectedCourseDeliveryId" type="String" access="private" default="" />
    <aura:attribute name="selectedContactId" type="String" access="private" default="" />
    
    <aura:registerEvent name="broadcastStudentSelected" type="c:AwInstructorsStudentSelected"/>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <aura:handler name="onStudentSelected" event="c:StudentSelected" action="{!c.onStudentSelected}" />
	
    <div class="slds-m-bottom_small">
        <!-- Following syntax saves having to write a handler statement -->
	    <c:StudentBrowserForm onStudentFilterChange="{!c.onStudentFilterChange}" />
    </div>
    
    <lightning:tabset variant="scoped">
        
    	<lightning:tab label="Gallery">
            <ui:scrollerWrapper class="scrollerSize">
                <c:StudentTiles students="{!v.studentList}" 
                                selectedStudentId="{!v.selectedContactId}"/>
            </ui:scrollerWrapper>
        </lightning:tab>
        
        <lightning:tab label="Grid">
            <ui:scrollerWrapper class="scrollerSize">
                <c:DataGrid data="{!v.studentList}" pkField="Id">    
                    <c:DataGridColumn fieldName="Name" label="Name" />
                    <c:DataGridColumn fieldName="Title" label="Title" hidden="true" />
                    <c:DataGridColumn fieldName="Phone" label="Phone" type="phone" />
                    <c:DataGridColumn fieldName="Email" label="E-Mail" type="email" />
                </c:DataGrid>
            </ui:scrollerWrapper>
        </lightning:tab>
        
    </lightning:tabset>
    
</aura:component>