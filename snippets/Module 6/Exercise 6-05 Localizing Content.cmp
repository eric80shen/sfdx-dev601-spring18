<!--

Define a dynamic label for use in the “Not Available” message.

Tasks:
1. Define a label.
2. Deploy the label.
3. Translate the label.
4. Verify that the label is output for French-speaking users.

-->

<!-- CertificationStudentListController.js -->
({
    doInit : function(component, event, helper) {
        component.set('v.columns', [    
            {label: 'Name', fieldName: 'name', type: 'text'},
            {label: 'Date', fieldName: 'date', type: 'text'},
            {label: 'Email',fieldName: 'email', type: 'email'},
            {label: 'Contact Phone', fieldName: 'phone', type: 'phone'}        
        ]);
    },
    
    onCertificationIdChange : function(component, event, helper) {
		helper.refreshData(component);
    },
    
    onRowSelection : function(component,event,helper) {
        helper.enableActionButtons(
            component,
            event.getParam('selectedRows').length > 0
        );
    },
    
    onCertActions : function(component,event,helper) {
		var action = event.getSource().getLocalId();
        var selections = component.find('datatable').getSelectedRows();
        var selectedIds = [];
        for (var i = 0; i < selections.length; i++) {
            selectedIds.push(selections[i].certificationHeldId);
        }
		selectedIds = selectedIds.join(',');
        
        switch(action) {
            case 'btnEmail' : 
                helper.notAvailable(component);
                break;
            case 'btnSendCert' :
                helper.notAvailable(component);
                break;
            case 'btnDelete' :
                helper.onDelete(component,selectedIds);
                break;
        }
	}
})

<!-- CertificationStudentListHelper.js -->
({
    enableActionButtons : function(component,mode) {
        mode = !mode;
        component.find('btnEmail').set('v.disabled',mode);
        component.find('btnSendCert').set('v.disabled',mode);
        component.find('btnDelete').set('v.disabled',mode);
    },
    
    onDelete : function(component,selectedIds) {
        this.callServer(
            component,
            "c.deleteStudentCertification",
            function(response) {  
                this.refreshData(component);
            },
            {
                certificationIds : selectedIds
            }
        );
    },
    
    refreshData : function(component) {
        this.callServer(
            component,
            "c.getCertifiedStudents",
            function(response) {  
                var aData = [];
                for (var i=0; i<response.length; i++) {
                    var rec = response[i];
                    aData.push({
                        certificationHeldId: rec.Id,
                        contactId: rec.Certified_Professional__r.Id,
                        name: rec.Certified_Professional__r.Name,
                        date: rec.Date_Achieved__c,
                        email:rec.Certified_Professional__r.Email,
                        phone: rec.Certified_Professional__r.MobilePhone
                    });
                }
                component.set('v.contacts', aData);
            },
            {
                certificationId : component.get('v.certificationId')
            }
        ); 
    },
    
    notAvailable : function(component) {
        this.showNotification(
            component,
            "Not Available",
            "",
            $A.get("$Label.c.Feature_Not_Available")
        );
    }
})

<!-- OR with all the sorting stuff -->

<!-- CertificationStudentListController.js -->
({
    doInit: function(component, event, helper) {
        
        component.set('v.columns', [    
            {label: 'Name', fieldName: 'name', type: 'text', sortable: true},
            {label: 'Date', fieldName: 'date', type: 'datetime', sortable: true},
            {label: 'Email', fieldName: 'email', type: 'email', sortable: true},
            {label: 'Contact Phone', fieldName: 'phone', type: 'phone'}        
        ]);
    },
    
    onRowSelection: function(component,event,helper) {
        helper.enableActionButtons(component,event.getParam('selectedRows').length > 0);
    },
    
    onCertificationIdChange: function(component,event,helper) {
        helper.refreshData(component);
    },
    
    onCertActions: function(component,event,helper) {
        var action =  event.getSource().getLocalId();
        var selections = component.find('datatable').getSelectedRows();
        
        var selectedIds = [];
        for (var i = 0; i < selections.length; i++){
            selectedIds.push(selections[i].certificationHeldId);
        }
        selectedIds = selectedIds.join(',');
        
        switch(action) {
            case 'btnEmail' : 
                helper.notAvailable(component);
                break;
            case 'btnSendCert' :
                helper.notAvailable(component);
                break;
            case 'btnDelete' :
                helper.onDelete(component,selectedIds);
                break;
        }
    },
    
    onMySort:function(component,event,helper){
        var fieldName = event.getParam('fieldName');
        var sortDirection = event.getParam('sortDirection');
        // assign the latest attribute with the sorted column fieldName and sorted direction
        component.set("v.sortedBy", fieldName);
        component.set("v.sortedDirection", sortDirection);
        helper.sortData(component, fieldName, sortDirection);
    }
})

<!-- CertificationStudentListHelper.js -->
({
    enableActionButtons : function(component,mode) {
        mode = !mode;
        component.find('btnEmail').set('v.disabled',mode);
        component.find('btnSendCert').set('v.disabled',mode);
        component.find('btnDelete').set('v.disabled',mode);
    },
    
    onDelete: function(component,selectedIds) {
        this.callServer(
            component,
            "c.deleteStudentCertification",
            function(response) {  
                this.refreshData(component);
            },
            {
                certificationIds : selectedIds
            }
        );
    },
    
    refreshData: function(component) {
        this.callServer(
            component,
            "c.getCertifiedStudents",
            function(response) {  
                var aData = [];
                for (var i=0; i<response.length; i++) {
                    aData.push({
                        certificationHeldId: response[i].Id,
                        contactId: response[i].Certified_Professional__r.Id,
                        name: response[i].Certified_Professional__r.Name,
                        date: response[i].Date_Achieved__c,
                        email: response[i].Certified_Professional__r.Email,
                        phone: response[i].Certified_Professional__r.MobilePhone
                    });
                }
                console.log('aData',aData);
                component.set('v.contacts', aData);
            },
            {
                certificationId: component.get('v.certificationId')
            }
        );  
    },
    
    notAvailable : function(component) {
        this.showNotification(
            component,
            "Not Available",
            "",
            $A.get("$Label.c.Feature_Not_Available")
        );
    },
    
    sortData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.contacts");
        var reverse = sortDirection !== 'asc';
        //sorts the rows based on the column header that's clicked
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.contacts", data);
    },

    sortBy: function (field, reverse, primer) {
        var key = primer ?
            function(x) {return primer(x[field])} :
            function(x) {return x[field]};
        //checks if the two rows should switch places
        reverse = !reverse ? 1 : -1;
        return function (a, b) {
            return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
        }
    }
})